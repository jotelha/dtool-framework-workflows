name: dtool-lookup-api-test

on:
  workflow_call:

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        dserver-container-composition-version: ['main']

    steps:
    - name: Git checkout this
      uses: actions/checkout@v4

    - name: Git checkout dserver-container-composition ${{ matrix.dserver-container-composition-version }}
      uses: actions/checkout@v4
      with:
        repository: livMatS/dserver-container-composition
        ref: ${{ matrix.dserver-container-composition-version }}
        path: dserver-container-composition

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Provide dserver ${{ matrix.dserver-version }}
      working-directory: ./dserver-container-composition
      run: |
        # the following line allows testing locally with act (https://github.com/nektos/act),
        # i.e. by running
        #   act -W .github/workflows/test.yml --bind
        # from within this repository's root directory (see README for more information).
        sudo chown runner:docker /var/run/docker.sock
        # see https://github.com/nektos/act/issues/724#issuecomment-855390956

        echo "y" | maintenance/replace_hostname.sh localhost
        source .env
        source env.testing.rc

        echo "printenv"
        printenv

        echo "merged docker-compose config"
        docker compose ${DOCKER_COMPOSE_OPTS} config

        echo "docker compose build"
        docker compose ${DOCKER_COMPOSE_OPTS} build

        echo "docker image ls"
        docker image ls

        echo "generate jwt key"
        cd keys
        bash generate_jwt_key.sh
        cd ..

        echo "docker compose up -d"
        docker compose ${DOCKER_COMPOSE_OPTS} up -d 

        echo "docker container ls --all"
        docker container ls --all

        echo "docker volume ls"
        docker volume ls
        
        echo "docker images"
        docker compose ${DOCKER_COMPOSE_OPTS} images

        echo "dserver log"
        docker compose ${DOCKER_COMPOSE_OPTS} logs dserver
        
        echo "dserver client log"
        docker compose ${DOCKER_COMPOSE_OPTS} logs dserver_client

        echo "s3server log"
        docker compose  ${DOCKER_COMPOSE_OPTS} logs s3server

        echo "s3server-init log"
        docker compose  ${DOCKER_COMPOSE_OPTS} logs s3server_init

        echo "testing-env-init"
        docker compose  ${DOCKER_COMPOSE_OPTS} logs testing_env_init

        echo "explicitly re-evoke dataset indexing"
        docker compose ${DOCKER_COMPOSE_OPTS} exec -T dserver /refresh_index

        echo "dtool query '{}'"
        docker compose ${DOCKER_COMPOSE_OPTS} run dserver_client query '{}'

    - name: Install basic testing requirements
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel setuptools-scm[toml] importlib-metadata
        pip install flake8 pytest pytest-cov pytest-ordering

    - name: Install this package
      run: |
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install ".[testing]"
        echo "pip list"
        pip list

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Pytest
      run: pytest --deselect=dserver-container-composition
